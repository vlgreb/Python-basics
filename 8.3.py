# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на
# наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
# пользователя данные и заполнять список необходимо только числами. Класс-исключение
# должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
# скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа
# элемента. Вносить его в список, только если введено число. Класс-исключение должен не
# позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class OwnErr(Exception):
    def __init__(self, text):
        self.text = text


# функция проверки числа
def is_digit(string):

    if string.isdigit():
        return True
    else:
        try:
            float(string)
            return True
        except ValueError:
            return False


my_list = []
while True:
    a = input('Введите число для списка. Для выхода введите "stop" ')
    if a == 'stop':
        break
    try:
        if is_digit(a):
            my_list.append(a)
        else:
            raise OwnErr('Это не число')
    except OwnErr as err:
        print(err)

print(my_list)